{"ast":null,"code":"var _jsxFileName = \"/Users/yanapaudel/Desktop/NewReact/UserMovieList/src/components/moviesList/display.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport classes from \"./display.module.css\";\nimport unavailablePoster from \"./../img/unavailablePoster.jpeg\";\nimport { db } from './../../firebase-config';\nimport { addDoc, collection, getDocs, deteDoc, doc, deleteDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Display = props => {\n  _s();\n\n  const [sendLikeStorage, setSendLikeStorage] = useState(false);\n  const [sendDislikeStorage, setSendDislikeStorage] = useState(false);\n  const userCollectionRef = collection(db, \"users\");\n  const userCollectionReff = collection(db, \"dislikeUsers\");\n  const [usersLike, setUsersLike] = useState([]);\n\n  const getUsersLike = async () => {\n    const data = await getDocs(userCollectionReff);\n    setUsersLike(data.docs.map(doc => ({ ...doc.data(),\n      id: doc.id\n    })));\n    console.log(\"++++\");\n  };\n\n  const createUserLike = async () => {\n    setSendLikeStorage(true);\n    await addDoc(userCollectionRef, {\n      Title: props.movies.Title,\n      Type: props.movies.Type,\n      Poster: props.movies.Poster,\n      Year: props.movies.Year,\n      imdbId: props.movies.imdbID\n    });\n  };\n\n  const createUserDislike = async () => {\n    setSendDislikeStorage(true);\n    setSendLikeStorage(false);\n    await addDoc(userCollectionReff, {\n      Title: props.movies.Title,\n      Type: props.movies.Type,\n      Poster: props.movies.Poster,\n      Year: props.movies.Year,\n      imdbId: props.movies.imdbID\n    });\n  };\n\n  const posterSrc = props.movies.Poster === \"N/A\" ? unavailablePoster : props.movies.Poster;\n  const posterSize = props.movies.Poster === \"N/A\" ? classes.defaultPoster : \"\";\n\n  const removelikeHandler = imdbID => {\n    setSendLikeStorage(false);\n\n    const remove = () => {\n      fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/likedmovies/${imdbID}.json`, {\n        method: 'DELETE'\n      });\n    };\n\n    remove();\n  }; // const updateUserLike = async (id, Title, Type, Movie, Year, Poster) => {\n  //   const userDoc = doc(db, \"users\", id)\n  //   await updateDoc()\n  // }\n\n\n  const removedisLikeHandler = async imdbID => {\n    setSendDislikeStorage(false); // const remove=()=>{\n    //   fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/dislikedmovies/${imdbID}.json`,{\n    //     method: 'DELETE'\n    //   })\n    // }\n    // remove()\n\n    getUsersLike();\n    console.log(usersLike); // const userDoc= doc(db, \"dislikeUsers\", imdbID, props.movies.Title, props.movies.Poster, props.movies.Year, props.movies.Type)\n    // await deleteDoc(userDoc)\n  };\n\n  useEffect(() => {\n    const checkMovie = async () => {\n      const response = await fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/dislikedmovies/${props.movies.imdbID}.json`, {\n        method: 'GET'\n      });\n      const responseData = await response.json();\n\n      if (responseData === null) {\n        throw new Error(\"true\");\n      }\n\n      setSendDislikeStorage(true);\n    };\n\n    checkMovie().catch(() => {\n      setSendDislikeStorage(false);\n    });\n  }, [props.movies.imdbID], []);\n  useEffect(() => {\n    const checkMovie = async () => {\n      const response = await fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/likedmovies/${props.movies.imdbID}.json`, {\n        method: 'GET'\n      });\n      const responseData = await response.json();\n\n      if (responseData === null) {\n        throw new Error(\"true\");\n      }\n\n      setSendLikeStorage(true);\n    };\n\n    checkMovie().catch(error => {\n      setSendLikeStorage(false);\n    });\n  }, [props.movies.imdbID], []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.moviesList,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: posterSrc,\n          alt: \"poster\",\n          className: posterSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: props.movies.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.eachMovBtn,\n          children: [!sendLikeStorage && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createUserLike,\n            className: classes.fav,\n            children: \"Favrouite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 34\n          }, this), sendLikeStorage && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removelikeHandler(props.movies.imdbID),\n            className: classes.fav,\n            children: \"Remove Favrouite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this), !sendDislikeStorage && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createUserDislike,\n            className: classes.dislike,\n            children: \"Dislike\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 37\n          }, this), sendDislikeStorage && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removedisLikeHandler(props.movies.imdbID),\n            className: classes.dislike,\n            children: \"Remove Disliked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Display, \"+KU7tSZqXiipnCKaU/c44rZlc1o=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["React","useEffect","useState","classes","unavailablePoster","db","addDoc","collection","getDocs","deteDoc","doc","deleteDoc","Display","props","sendLikeStorage","setSendLikeStorage","sendDislikeStorage","setSendDislikeStorage","userCollectionRef","userCollectionReff","usersLike","setUsersLike","getUsersLike","data","docs","map","id","console","log","createUserLike","Title","movies","Type","Poster","Year","imdbId","imdbID","createUserDislike","posterSrc","posterSize","defaultPoster","removelikeHandler","remove","fetch","method","removedisLikeHandler","checkMovie","response","responseData","json","Error","catch","error","moviesList","eachMovBtn","fav","dislike"],"sources":["/Users/yanapaudel/Desktop/NewReact/UserMovieList/src/components/moviesList/display.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classes from \"./display.module.css\";\nimport unavailablePoster from \"./../img/unavailablePoster.jpeg\";\nimport {db} from './../../firebase-config'\nimport {addDoc, collection, getDocs, deteDoc, doc, deleteDoc} from \"firebase/firestore\"\n\n\nconst Display = (props) => {\n  const [sendLikeStorage, setSendLikeStorage] = useState(false);\n  const [sendDislikeStorage, setSendDislikeStorage] = useState(false);\n  const userCollectionRef = collection(db, \"users\")\n  const userCollectionReff = collection(db, \"dislikeUsers\")\n  const [usersLike, setUsersLike] = useState([])\n\n  const getUsersLike = async () => {\n    const data = await getDocs(userCollectionReff)\n    setUsersLike(data.docs.map((doc)=>({...doc.data(), id:doc.id})))\n    console.log(\"++++\")\n}\n\n  const createUserLike = async () => {\n    setSendLikeStorage(true);\n    await addDoc(userCollectionRef, {\n        Title:props.movies.Title,\n        Type:props.movies.Type,\n        Poster:props.movies.Poster,\n        Year:props.movies.Year,\n        imdbId:props.movies.imdbID,\n\n    })\n  }\n\n  const createUserDislike = async () => {\n    setSendDislikeStorage(true)\n    setSendLikeStorage(false);\n    await addDoc(userCollectionReff, {\n        Title:props.movies.Title,\n        Type:props.movies.Type,\n        Poster:props.movies.Poster,\n        Year:props.movies.Year,\n        imdbId:props.movies.imdbID,\n\n    })\n  }\n\n\n\n\n\n  const posterSrc =\n    props.movies.Poster === \"N/A\" ? unavailablePoster : props.movies.Poster;\n  const posterSize = props.movies.Poster === \"N/A\" ? classes.defaultPoster : \"\";\n\n\n\n  const removelikeHandler = (imdbID) =>{\n\n    setSendLikeStorage(false);\n    const remove=()=>{\n      fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/likedmovies/${imdbID}.json`,{\n        method: 'DELETE'\n      })\n\n    }\n    remove()\n  }\n\n  // const updateUserLike = async (id, Title, Type, Movie, Year, Poster) => {\n  //   const userDoc = doc(db, \"users\", id)\n  //   await updateDoc()\n  // }\n\n  const removedisLikeHandler = async (imdbID) => {\n\n    setSendDislikeStorage(false)\n\n    // const remove=()=>{\n    //   fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/dislikedmovies/${imdbID}.json`,{\n    //     method: 'DELETE'\n    //   })\n\n    // }\n    // remove()\n    \n   \n    getUsersLike()\n\n    console.log(usersLike)\n\n   \n\n    // const userDoc= doc(db, \"dislikeUsers\", imdbID, props.movies.Title, props.movies.Poster, props.movies.Year, props.movies.Type)\n    // await deleteDoc(userDoc)\n\n\n  }\n\n  useEffect( ()=>{\n    const checkMovie = async ()=>{\n    const response = await fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/dislikedmovies/${props.movies.imdbID}.json`,{\n      method:'GET'\n    })\n\n    const responseData = await response.json();\n    if (responseData===null) {\n      throw new Error(\"true\");\n      \n    }\n\n    setSendDislikeStorage(true);\n\n\n  }\ncheckMovie().catch(()=>{\n  setSendDislikeStorage(false);\n})}, [props.movies.imdbID], [])\n\n  useEffect( ()=>{\n    const checkMovie = async ()=>{\n    const response = await fetch(`https://mymovielist-7f102-default-rtdb.firebaseio.com/likedmovies/${props.movies.imdbID}.json`,{\n      method:'GET'\n    })\n\n    const responseData = await response.json();\n    if (responseData===null) {\n      throw new Error(\"true\");\n      \n    }\n\n    setSendLikeStorage(true);\n\n  }\ncheckMovie().catch((error)=>{\n  setSendLikeStorage(false);\n})}, [props.movies.imdbID], [])\n\n  return (\n    <React.Fragment>\n      <div className={classes.moviesList}>\n        <div>\n          {<img src={posterSrc} alt=\"poster\" className={posterSize} />}\n          <div>{props.movies.Title}</div>\n        \n          <div className={classes.eachMovBtn}>\n            {!sendLikeStorage && <button onClick={createUserLike} className={classes.fav}>Favrouite</button>}\n            {sendLikeStorage && <button onClick={()=>removelikeHandler(props.movies.imdbID)} className={classes.fav}>Remove Favrouite</button>}\n            \n            {!sendDislikeStorage && <button onClick={createUserDislike} className={classes.dislike}>Dislike</button>}\n            {sendDislikeStorage && <button onClick={()=>removedisLikeHandler(props.movies.imdbID)} className={classes.dislike}>Remove Disliked</button>}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Display;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}